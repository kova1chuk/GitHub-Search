{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { getRequestParser } from \"utils\";\nimport { axiosGitApi as axios } from \"core\";\nexport default {\n  searchRepository: function searchRepository() {\n    var searchRequest,\n        _args = arguments;\n    return _regeneratorRuntime.async(function searchRepository$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            searchRequest = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(axios.get(\"/search/repositories\".concat(getRequestParser(searchRequest))).then(function (response) {\n              if (response.status !== 200) {\n                return Promise.reject(response.status);\n              }\n\n              return Promise.resolve(response.data);\n            }));\n\n          case 3:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  getRepositoryTopics: function getRepositoryTopics(owner, repo) {\n    return _regeneratorRuntime.async(function getRepositoryTopics$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(axios.get(\"/repos/\".concat(owner, \"/\").concat(repo, \"/topics\")).then(function (response) {\n              if (response.status !== 200) {\n                return Promise.reject(response.status);\n              }\n\n              return Promise.resolve(response.data);\n            })[\"catch\"](function (err) {\n              return Promise.resolve(null);\n            }));\n\n          case 2:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  getRepositoryIssuesNeedHelp: function getRepositoryIssuesNeedHelp(owner, repo) {\n    return _regeneratorRuntime.async(function getRepositoryIssuesNeedHelp$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(axios.get(\"/repos/\".concat(owner, \"/\").concat(repo, \"/issues\").concat(getRequestParser({\n              labels: \"help wanted\"\n            }))).then(function (response) {\n              if (response.status !== 200) {\n                return Promise.reject(response.status);\n              }\n\n              return Promise.resolve(response.data);\n            })[\"catch\"](function (err) {\n              return Promise.resolve(null);\n            }));\n\n          case 2:\n            return _context3.abrupt(\"return\", _context3.sent);\n\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};","map":{"version":3,"sources":["/home/oleksii/Documents/Programming/BetterMeTest/utils/api/git.ts"],"names":["getRequestParser","axiosGitApi","axios","searchRepository","searchRequest","get","then","response","status","Promise","reject","resolve","data","getRepositoryTopics","owner","repo","err","getRepositoryIssuesNeedHelp","labels"],"mappings":";AAAA,SAASA,gBAAT,QAAiC,OAAjC;AACA,SAASC,WAAW,IAAIC,KAAxB,QAAqC,MAArC;AAGA,eAAe;AACbC,EAAAA,gBAAgB,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBC,YAAAA,aADgB,2DACmB,EADnB;AAAA;AAAA,6CAGHF,KAAK,CACfG,GADU,+BACiBL,gBAAgB,CAACI,aAAD,CADjC,GAEVE,IAFU,CAEL,UAACC,QAAD,EAAc;AAClB,kBAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,uBAAOC,OAAO,CAACC,MAAR,CAAeH,QAAQ,CAACC,MAAxB,CAAP;AACD;;AACD,qBAAOC,OAAO,CAACE,OAAR,CAAgBJ,QAAQ,CAACK,IAAzB,CAAP;AACD,aAPU,CAHG;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADL;AAabC,EAAAA,mBAAmB,EAAE,6BAAOC,KAAP,EAAsBC,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACNb,KAAK,CACfG,GADU,kBACIS,KADJ,cACaC,IADb,cAEVT,IAFU,CAEL,UAACC,QAAD,EAAc;AAClB,kBAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,uBAAOC,OAAO,CAACC,MAAR,CAAeH,QAAQ,CAACC,MAAxB,CAAP;AACD;;AACD,qBAAOC,OAAO,CAACE,OAAR,CAAgBJ,QAAQ,CAACK,IAAzB,CAAP;AACD,aAPU,WAQJ,UAACI,GAAD,EAAS;AACd,qBAAOP,OAAO,CAACE,OAAR,CAAgB,IAAhB,CAAP;AACD,aAVU,CADM;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAbR;AA0BbM,EAAAA,2BAA2B,EAAE,qCAC3BH,KAD2B,EAE3BC,IAF2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAIdb,KAAK,CACfG,GADU,kBAECS,KAFD,cAEUC,IAFV,oBAEwBf,gBAAgB,CAAC;AAChDkB,cAAAA,MAAM,EAAE;AADwC,aAAD,CAFxC,GAMVZ,IANU,CAML,UAACC,QAAD,EAAc;AAClB,kBAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,uBAAOC,OAAO,CAACC,MAAR,CAAeH,QAAQ,CAACC,MAAxB,CAAP;AACD;;AACD,qBAAOC,OAAO,CAACE,OAAR,CAAgBJ,QAAQ,CAACK,IAAzB,CAAP;AACD,aAXU,WAYJ,UAACI,GAAD,EAAS;AACd,qBAAOP,OAAO,CAACE,OAAR,CAAgB,IAAhB,CAAP;AACD,aAdU,CAJc;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA1BhB,CAAf","sourcesContent":["import { getRequestParser } from \"utils\";\nimport { axiosGitApi as axios } from \"core\";\nimport { ISearchRepository } from \"interfaces\";\n\nexport default {\n  searchRepository: async (\n    searchRequest: ISearchRepository = {}\n  ): Promise<any> => {\n    return await axios\n      .get(`/search/repositories${getRequestParser(searchRequest)}`)\n      .then((response) => {\n        if (response.status !== 200) {\n          return Promise.reject(response.status);\n        }\n        return Promise.resolve(response.data);\n      });\n  },\n  getRepositoryTopics: async (owner: string, repo: string): Promise<any> => {\n    return await axios\n      .get(`/repos/${owner}/${repo}/topics`)\n      .then((response) => {\n        if (response.status !== 200) {\n          return Promise.reject(response.status);\n        }\n        return Promise.resolve(response.data);\n      })\n      .catch((err) => {\n        return Promise.resolve(null);\n      });\n  },\n  getRepositoryIssuesNeedHelp: async (\n    owner: string,\n    repo: string\n  ): Promise<any> => {\n    return await axios\n      .get(\n        `/repos/${owner}/${repo}/issues${getRequestParser({\n          labels: \"help wanted\",\n        })}`\n      )\n      .then((response) => {\n        if (response.status !== 200) {\n          return Promise.reject(response.status);\n        }\n        return Promise.resolve(response.data);\n      })\n      .catch((err) => {\n        return Promise.resolve(null);\n      });\n  },\n};\n"]},"metadata":{},"sourceType":"module"}