{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { SET_SEARCH_RESULT } from \"./types\";\nimport { gitApi } from \"utils/api\";\n\nvar parseRepos = function parseRepos(repos) {// return\n  // const { total_count, incomplete_results, items } = response.data;\n  // console.log(\n  //   items.map((item) => {\n  //     const {\n  //       full_name,\n  //       html_url,\n  //       description,\n  //       stargazers_count,\n  //       language,\n  //       license,\n  //       updated_at,\n  //     } = item;\n  //     return {\n  //       full_name,\n  //       html_url,\n  //       description,\n  //       stargazers_count,\n  //       language,\n  //       license: license.name,\n  //       updated_at,\n  //     };\n  //   })\n  // );\n};\n\nvar Actions = {\n  setSearchResult: function setSearchResult(searchResult) {\n    return {\n      type: SET_SEARCH_RESULT,\n      payload: searchResult\n    };\n  },\n  fetchSearch: function fetchSearch(searchQuery) {\n    return function _callee(dispatch) {\n      var repos;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(gitApi.searchRepository(searchQuery));\n\n            case 2:\n              repos = _context.sent;\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n  }\n};\nexport default Actions;","map":{"version":3,"sources":["/home/oleksii/Documents/Programming/BetterMeTest/store/repoSearch/actions.ts"],"names":["SET_SEARCH_RESULT","gitApi","parseRepos","repos","Actions","setSearchResult","searchResult","type","payload","fetchSearch","searchQuery","dispatch","searchRepository"],"mappings":";AAAA,SAASA,iBAAT,QAAkC,SAAlC;AAEA,SAASC,MAAT,QAAuB,WAAvB;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD,EAAW,CAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CAzBD;;AA2BA,IAAMC,OAAO,GAAG;AACdC,EAAAA,eAAe,EAAE,yBAACC,YAAD,EAAqC;AACpD,WAAO;AACLC,MAAAA,IAAI,EAAEP,iBADD;AAELQ,MAAAA,OAAO,EAAEF;AAFJ,KAAP;AAID,GANa;AAOdG,EAAAA,WAAW,EAAE,qBAACC,WAAD;AAAA,WAAoC,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAC3BV,MAAM,CAACW,gBAAP,CAAwBF,WAAxB,CAD2B;;AAAA;AACzCP,cAAAA,KADyC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAApC;AAAA;AAPC,CAAhB;AAYA,eAAeC,OAAf","sourcesContent":["import { SET_SEARCH_RESULT } from \"./types\";\nimport { IRepositoryItem, ISearchRepository } from \"interfaces\";\nimport { gitApi } from \"utils/api\";\n\nconst parseRepos = (repos) => {\n  // return\n  // const { total_count, incomplete_results, items } = response.data;\n  // console.log(\n  //   items.map((item) => {\n  //     const {\n  //       full_name,\n  //       html_url,\n  //       description,\n  //       stargazers_count,\n  //       language,\n  //       license,\n  //       updated_at,\n  //     } = item;\n  //     return {\n  //       full_name,\n  //       html_url,\n  //       description,\n  //       stargazers_count,\n  //       language,\n  //       license: license.name,\n  //       updated_at,\n  //     };\n  //   })\n  // );\n};\n\nconst Actions = {\n  setSearchResult: (searchResult: IRepositoryItem[]) => {\n    return {\n      type: SET_SEARCH_RESULT,\n      payload: searchResult,\n    };\n  },\n  fetchSearch: (searchQuery: ISearchRepository) => async (dispatch) => {\n    const repos = await gitApi.searchRepository(searchQuery);\n  },\n};\n\nexport default Actions;\n"]},"metadata":{},"sourceType":"module"}