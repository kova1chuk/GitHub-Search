{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { SET_SEARCH_RESULT } from \"./types\";\nimport { gitApi } from \"utils/api\";\nvar Actions = {\n  setSearchResult: function setSearchResult(searchResult) {\n    return {\n      type: SET_SEARCH_RESULT,\n      payload: searchResult\n    };\n  },\n  fetchSearch: function fetchSearch(searchQuery) {\n    return function _callee(dispatch) {\n      var repos;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(gitApi.searchRepository(searchQuery));\n\n            case 2:\n              repos = _context.sent;\n              console.log(parseRepos(repos.items)); // const\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n  }\n};\nexport default Actions;\n\nvar parseRepos = function parseRepos(repos) {\n  return repos.map(function (item) {\n    var name = item.name,\n        full_name = item.full_name,\n        owner = item.owner,\n        html_url = item.html_url,\n        description = item.description,\n        stargazers_count = item.stargazers_count,\n        language = item.language,\n        license = item.license,\n        updated_at = item.updated_at;\n    return {\n      name: name,\n      full_name: full_name,\n      owner: owner.login,\n      html_url: html_url,\n      description: description,\n      stargazers_count: stargazers_count,\n      language: language,\n      license: license.name,\n      updated_at: updated_at\n    };\n  });\n};\n\nvar addTopics = function addTopics(repos) {\n  return Promise.all(repos.map(function _callee2(item) {\n    var topics;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(gitApi.getRepositoryTopics(item.owner, item.name));\n\n          case 2:\n            topics = _context2.sent;\n            return _context2.abrupt(\"return\", _objectSpread({\n              topics: topics.names\n            }, item));\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }));\n};","map":{"version":3,"sources":["/home/oleksii/Documents/Programming/BetterMeTest/store/repoSearch/actions.ts"],"names":["SET_SEARCH_RESULT","gitApi","Actions","setSearchResult","searchResult","type","payload","fetchSearch","searchQuery","dispatch","searchRepository","repos","console","log","parseRepos","items","map","item","name","full_name","owner","html_url","description","stargazers_count","language","license","updated_at","login","addTopics","Promise","all","getRepositoryTopics","topics","names"],"mappings":";;;;;;;AAAA,SAASA,iBAAT,QAAsD,SAAtD;AAEA,SAASC,MAAT,QAAuB,WAAvB;AAEA,IAAMC,OAAO,GAAG;AACdC,EAAAA,eAAe,EAAE,yBAACC,YAAD,EAAsC;AACrD,WAAO;AACLC,MAAAA,IAAI,EAAEL,iBADD;AAELM,MAAAA,OAAO,EAAEF;AAFJ,KAAP;AAID,GANa;AAOdG,EAAAA,WAAW,EAAE,qBAACC,WAAD;AAAA,WAAoC,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAC3BR,MAAM,CAACS,gBAAP,CAAwBF,WAAxB,CAD2B;;AAAA;AACzCG,cAAAA,KADyC;AAE/CC,cAAAA,OAAO,CAACC,GAAR,CAAYC,UAAU,CAACH,KAAK,CAACI,KAAP,CAAtB,EAF+C,CAI/C;;AAJ+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAApC;AAAA;AAPC,CAAhB;AAeA,eAAeb,OAAf;;AAEA,IAAMY,UAAU,GAAG,SAAbA,UAAa,CAACH,KAAD,EAAW;AAC5B,SAAOA,KAAK,CAACK,GAAN,CAAU,UAACC,IAAD,EAAU;AAAA,QAEvBC,IAFuB,GAWrBD,IAXqB,CAEvBC,IAFuB;AAAA,QAGvBC,SAHuB,GAWrBF,IAXqB,CAGvBE,SAHuB;AAAA,QAIvBC,KAJuB,GAWrBH,IAXqB,CAIvBG,KAJuB;AAAA,QAKvBC,QALuB,GAWrBJ,IAXqB,CAKvBI,QALuB;AAAA,QAMvBC,WANuB,GAWrBL,IAXqB,CAMvBK,WANuB;AAAA,QAOvBC,gBAPuB,GAWrBN,IAXqB,CAOvBM,gBAPuB;AAAA,QAQvBC,QARuB,GAWrBP,IAXqB,CAQvBO,QARuB;AAAA,QASvBC,OATuB,GAWrBR,IAXqB,CASvBQ,OATuB;AAAA,QAUvBC,UAVuB,GAWrBT,IAXqB,CAUvBS,UAVuB;AAazB,WAAO;AACLR,MAAAA,IAAI,EAAJA,IADK;AAELC,MAAAA,SAAS,EAATA,SAFK;AAGLC,MAAAA,KAAK,EAAEA,KAAK,CAACO,KAHR;AAILN,MAAAA,QAAQ,EAARA,QAJK;AAKLC,MAAAA,WAAW,EAAXA,WALK;AAMLC,MAAAA,gBAAgB,EAAhBA,gBANK;AAOLC,MAAAA,QAAQ,EAARA,QAPK;AAQLC,MAAAA,OAAO,EAAEA,OAAO,CAACP,IARZ;AASLQ,MAAAA,UAAU,EAAVA;AATK,KAAP;AAWD,GAxBM,CAAP;AAyBD,CA1BD;;AA4BA,IAAME,SAAS,GAAG,SAAZA,SAAY,CAACjB,KAAD,EAAW;AAC3B,SAAOkB,OAAO,CAACC,GAAR,CACLnB,KAAK,CAACK,GAAN,CAAU,kBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACahB,MAAM,CAAC8B,mBAAP,CAA2Bd,IAAI,CAACG,KAAhC,EAAuCH,IAAI,CAACC,IAA5C,CADb;;AAAA;AACFc,YAAAA,MADE;AAAA;AAINA,cAAAA,MAAM,EAAEA,MAAM,CAACC;AAJT,eAKHhB,IALG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAV,CADK,CAAP;AAUD,CAXD","sourcesContent":["import { SET_SEARCH_RESULT, ISearchResultState } from \"./types\";\nimport { ISearchRepository } from \"interfaces\";\nimport { gitApi } from \"utils/api\";\n\nconst Actions = {\n  setSearchResult: (searchResult: ISearchResultState) => {\n    return {\n      type: SET_SEARCH_RESULT,\n      payload: searchResult,\n    };\n  },\n  fetchSearch: (searchQuery: ISearchRepository) => async (dispatch) => {\n    const repos = await gitApi.searchRepository(searchQuery);\n    console.log(parseRepos(repos.items));\n\n    // const\n  },\n};\n\nexport default Actions;\n\nconst parseRepos = (repos) => {\n  return repos.map((item) => {\n    const {\n      name,\n      full_name,\n      owner,\n      html_url,\n      description,\n      stargazers_count,\n      language,\n      license,\n      updated_at,\n    } = item;\n\n    return {\n      name,\n      full_name,\n      owner: owner.login,\n      html_url,\n      description,\n      stargazers_count,\n      language,\n      license: license.name,\n      updated_at,\n    };\n  });\n};\n\nconst addTopics = (repos) => {\n  return Promise.all(\n    repos.map(async (item) => {\n      const topics = await gitApi.getRepositoryTopics(item.owner, item.name);\n\n      return {\n        topics: topics.names,\n        ...item,\n      };\n    })\n  );\n};\n"]},"metadata":{},"sourceType":"module"}