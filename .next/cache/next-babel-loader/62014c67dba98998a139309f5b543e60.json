{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { SET_SEARCH_RESULT } from \"./types\";\nimport { gitApi } from \"utils/api\";\n\nvar parseRepos = function parseRepos(repos) {\n  return;\n  items.map(function (item) {\n    var full_name = item.full_name,\n        html_url = item.html_url,\n        description = item.description,\n        stargazers_count = item.stargazers_count,\n        language = item.language,\n        license = item.license,\n        updated_at = item.updated_at;\n    return {\n      full_name: full_name,\n      html_url: html_url,\n      description: description,\n      stargazers_count: stargazers_count,\n      language: language,\n      license: license.name,\n      updated_at: updated_at\n    };\n  });\n};\n\nvar Actions = {\n  setSearchResult: function setSearchResult(searchResult) {\n    return {\n      type: SET_SEARCH_RESULT,\n      payload: searchResult\n    };\n  },\n  fetchSearch: function fetchSearch(searchQuery) {\n    return function _callee(dispatch) {\n      var repos;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(gitApi.searchRepository(searchQuery));\n\n            case 2:\n              repos = _context.sent;\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n  }\n};\nexport default Actions;","map":{"version":3,"sources":["/home/oleksii/Documents/Programming/BetterMeTest/store/repoSearch/actions.ts"],"names":["SET_SEARCH_RESULT","gitApi","parseRepos","repos","items","map","item","full_name","html_url","description","stargazers_count","language","license","updated_at","name","Actions","setSearchResult","searchResult","type","payload","fetchSearch","searchQuery","dispatch","searchRepository"],"mappings":";AAAA,SAASA,iBAAT,QAAsD,SAAtD;AAEA,SAASC,MAAT,QAAuB,WAAvB;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD,EAAW;AAC5B;AACAC,EAAAA,KAAK,CAACC,GAAN,CAAU,UAACC,IAAD,EAAU;AAAA,QAEhBC,SAFgB,GASdD,IATc,CAEhBC,SAFgB;AAAA,QAGhBC,QAHgB,GASdF,IATc,CAGhBE,QAHgB;AAAA,QAIhBC,WAJgB,GASdH,IATc,CAIhBG,WAJgB;AAAA,QAKhBC,gBALgB,GASdJ,IATc,CAKhBI,gBALgB;AAAA,QAMhBC,QANgB,GASdL,IATc,CAMhBK,QANgB;AAAA,QAOhBC,OAPgB,GASdN,IATc,CAOhBM,OAPgB;AAAA,QAQhBC,UARgB,GASdP,IATc,CAQhBO,UARgB;AAUlB,WAAO;AACLN,MAAAA,SAAS,EAATA,SADK;AAELC,MAAAA,QAAQ,EAARA,QAFK;AAGLC,MAAAA,WAAW,EAAXA,WAHK;AAILC,MAAAA,gBAAgB,EAAhBA,gBAJK;AAKLC,MAAAA,QAAQ,EAARA,QALK;AAMLC,MAAAA,OAAO,EAAEA,OAAO,CAACE,IANZ;AAOLD,MAAAA,UAAU,EAAVA;AAPK,KAAP;AASD,GAnBD;AAoBD,CAtBD;;AAwBA,IAAME,OAAO,GAAG;AACdC,EAAAA,eAAe,EAAE,yBAACC,YAAD,EAAsC;AACrD,WAAO;AACLC,MAAAA,IAAI,EAAElB,iBADD;AAELmB,MAAAA,OAAO,EAAEF;AAFJ,KAAP;AAID,GANa;AAOdG,EAAAA,WAAW,EAAE,qBAACC,WAAD;AAAA,WAAoC,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAC3BrB,MAAM,CAACsB,gBAAP,CAAwBF,WAAxB,CAD2B;;AAAA;AACzClB,cAAAA,KADyC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAApC;AAAA;AAPC,CAAhB;AAYA,eAAeY,OAAf","sourcesContent":["import { SET_SEARCH_RESULT, ISearchResultState } from \"./types\";\nimport { ISearchRepository } from \"interfaces\";\nimport { gitApi } from \"utils/api\";\n\nconst parseRepos = (repos) => {\n  return;\n  items.map((item) => {\n    const {\n      full_name,\n      html_url,\n      description,\n      stargazers_count,\n      language,\n      license,\n      updated_at,\n    } = item;\n    return {\n      full_name,\n      html_url,\n      description,\n      stargazers_count,\n      language,\n      license: license.name,\n      updated_at,\n    };\n  });\n};\n\nconst Actions = {\n  setSearchResult: (searchResult: ISearchResultState) => {\n    return {\n      type: SET_SEARCH_RESULT,\n      payload: searchResult,\n    };\n  },\n  fetchSearch: (searchQuery: ISearchRepository) => async (dispatch) => {\n    const repos = await gitApi.searchRepository(searchQuery);\n  },\n};\n\nexport default Actions;\n"]},"metadata":{},"sourceType":"module"}