{"ast":null,"code":"import { getRequestParser } from \"utils\";\nimport { axiosGitApi as axios } from \"core\";\nexport default {\n  searchRepository: async (searchRequest = {}) => {\n    axios.get(\"/repos/github/linguist/content/lib/linguist/languages.yml\").then(res => console.log(res));\n    return await axios.get(`/search/repositories${getRequestParser(searchRequest)}`).then(response => {\n      if (response.status !== 200) {\n        return Promise.reject(response.status);\n      }\n\n      return Promise.resolve(response.data);\n    });\n  },\n  getRepositoryTopics: async (owner, repo) => {\n    return await axios.get(`/repos/${owner}/${repo}/topics`).then(response => {\n      if (response.status !== 200) {\n        return Promise.reject(response.status);\n      }\n\n      return Promise.resolve(response.data);\n    });\n  },\n  getRepositoryIssuesNeedHelp: async (owner, repo) => {\n    return await axios.get(`/repos/${owner}/${repo}/issues${getRequestParser({\n      labels: \"help wanted\"\n    })}`).then(response => {\n      if (response.status !== 200) {\n        return Promise.reject(response.status);\n      }\n\n      return Promise.resolve(response.data);\n    });\n  }\n};","map":{"version":3,"sources":["/home/oleksii/Documents/Programming/BetterMeTest/utils/api/git.ts"],"names":["getRequestParser","axiosGitApi","axios","searchRepository","searchRequest","get","then","res","console","log","response","status","Promise","reject","resolve","data","getRepositoryTopics","owner","repo","getRepositoryIssuesNeedHelp","labels"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,OAAjC;AACA,SAASC,WAAW,IAAIC,KAAxB,QAAqC,MAArC;AAGA,eAAe;AACbC,EAAAA,gBAAgB,EAAE,OAChBC,aAAgC,GAAG,EADnB,KAEC;AACjBF,IAAAA,KAAK,CACFG,GADH,CACO,2DADP,EAEGC,IAFH,CAESC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAFjB;AAGA,WAAO,MAAML,KAAK,CACfG,GADU,CACL,uBAAsBL,gBAAgB,CAACI,aAAD,CAAgB,EADjD,EAEVE,IAFU,CAEJI,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,eAAOC,OAAO,CAACC,MAAR,CAAeH,QAAQ,CAACC,MAAxB,CAAP;AACD;;AACD,aAAOC,OAAO,CAACE,OAAR,CAAgBJ,QAAQ,CAACK,IAAzB,CAAP;AACD,KAPU,CAAb;AAQD,GAfY;AAgBbC,EAAAA,mBAAmB,EAAE,OAAOC,KAAP,EAAsBC,IAAtB,KAAqD;AACxE,WAAO,MAAMhB,KAAK,CACfG,GADU,CACL,UAASY,KAAM,IAAGC,IAAK,SADlB,EAEVZ,IAFU,CAEJI,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,eAAOC,OAAO,CAACC,MAAR,CAAeH,QAAQ,CAACC,MAAxB,CAAP;AACD;;AACD,aAAOC,OAAO,CAACE,OAAR,CAAgBJ,QAAQ,CAACK,IAAzB,CAAP;AACD,KAPU,CAAb;AAQD,GAzBY;AA0BbI,EAAAA,2BAA2B,EAAE,OAC3BF,KAD2B,EAE3BC,IAF2B,KAGV;AACjB,WAAO,MAAMhB,KAAK,CACfG,GADU,CAER,UAASY,KAAM,IAAGC,IAAK,UAASlB,gBAAgB,CAAC;AAChDoB,MAAAA,MAAM,EAAE;AADwC,KAAD,CAE9C,EAJM,EAMVd,IANU,CAMJI,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,eAAOC,OAAO,CAACC,MAAR,CAAeH,QAAQ,CAACC,MAAxB,CAAP;AACD;;AACD,aAAOC,OAAO,CAACE,OAAR,CAAgBJ,QAAQ,CAACK,IAAzB,CAAP;AACD,KAXU,CAAb;AAYD;AA1CY,CAAf","sourcesContent":["import { getRequestParser } from \"utils\";\nimport { axiosGitApi as axios } from \"core\";\nimport { ISearchRepository } from \"interfaces\";\n\nexport default {\n  searchRepository: async (\n    searchRequest: ISearchRepository = {}\n  ): Promise<any> => {\n    axios\n      .get(\"/repos/github/linguist/content/lib/linguist/languages.yml\")\n      .then((res) => console.log(res));\n    return await axios\n      .get(`/search/repositories${getRequestParser(searchRequest)}`)\n      .then((response) => {\n        if (response.status !== 200) {\n          return Promise.reject(response.status);\n        }\n        return Promise.resolve(response.data);\n      });\n  },\n  getRepositoryTopics: async (owner: string, repo: string): Promise<any> => {\n    return await axios\n      .get(`/repos/${owner}/${repo}/topics`)\n      .then((response) => {\n        if (response.status !== 200) {\n          return Promise.reject(response.status);\n        }\n        return Promise.resolve(response.data);\n      });\n  },\n  getRepositoryIssuesNeedHelp: async (\n    owner: string,\n    repo: string\n  ): Promise<any> => {\n    return await axios\n      .get(\n        `/repos/${owner}/${repo}/issues${getRequestParser({\n          labels: \"help wanted\",\n        })}`\n      )\n      .then((response) => {\n        if (response.status !== 200) {\n          return Promise.reject(response.status);\n        }\n        return Promise.resolve(response.data);\n      });\n  },\n};\n"]},"metadata":{},"sourceType":"module"}