{"ast":null,"code":"import { SET_SEARCH_RESULT } from \"./types\";\nimport { gitApi } from \"utils/api\";\n\nconst parseRepos = repos => {\n  return repos.map(item => {\n    const {\n      full_name,\n      owner,\n      html_url,\n      description,\n      stargazers_count,\n      language,\n      license,\n      updated_at\n    } = item;\n    return {\n      full_name,\n      owner: owner.login,\n      html_url,\n      description,\n      stargazers_count,\n      language,\n      license: license.name,\n      updated_at\n    };\n  });\n};\n\nconst Actions = {\n  setSearchResult: searchResult => {\n    return {\n      type: SET_SEARCH_RESULT,\n      payload: searchResult\n    };\n  },\n  fetchSearch: searchQuery => async dispatch => {\n    const repos = await gitApi.searchRepository(searchQuery);\n    console.log(parseRepos(repos.items));\n  }\n};\nexport default Actions;","map":{"version":3,"sources":["/home/oleksii/Documents/Programming/BetterMeTest/store/repoSearch/actions.ts"],"names":["SET_SEARCH_RESULT","gitApi","parseRepos","repos","map","item","full_name","owner","html_url","description","stargazers_count","language","license","updated_at","login","name","Actions","setSearchResult","searchResult","type","payload","fetchSearch","searchQuery","dispatch","searchRepository","console","log","items"],"mappings":"AAAA,SAASA,iBAAT,QAAsD,SAAtD;AAEA,SAASC,MAAT,QAAuB,WAAvB;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAC5B,SAAOA,KAAK,CAACC,GAAN,CAAWC,IAAD,IAAU;AACzB,UAAM;AACJC,MAAAA,SADI;AAEJC,MAAAA,KAFI;AAGJC,MAAAA,QAHI;AAIJC,MAAAA,WAJI;AAKJC,MAAAA,gBALI;AAMJC,MAAAA,QANI;AAOJC,MAAAA,OAPI;AAQJC,MAAAA;AARI,QASFR,IATJ;AAWA,WAAO;AACLC,MAAAA,SADK;AAELC,MAAAA,KAAK,EAAEA,KAAK,CAACO,KAFR;AAGLN,MAAAA,QAHK;AAILC,MAAAA,WAJK;AAKLC,MAAAA,gBALK;AAMLC,MAAAA,QANK;AAOLC,MAAAA,OAAO,EAAEA,OAAO,CAACG,IAPZ;AAQLF,MAAAA;AARK,KAAP;AAUD,GAtBM,CAAP;AAuBD,CAxBD;;AA0BA,MAAMG,OAAO,GAAG;AACdC,EAAAA,eAAe,EAAGC,YAAD,IAAsC;AACrD,WAAO;AACLC,MAAAA,IAAI,EAAEnB,iBADD;AAELoB,MAAAA,OAAO,EAAEF;AAFJ,KAAP;AAID,GANa;AAOdG,EAAAA,WAAW,EAAGC,WAAD,IAAoC,MAAOC,QAAP,IAAoB;AACnE,UAAMpB,KAAK,GAAG,MAAMF,MAAM,CAACuB,gBAAP,CAAwBF,WAAxB,CAApB;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYxB,UAAU,CAACC,KAAK,CAACwB,KAAP,CAAtB;AACD;AAVa,CAAhB;AAaA,eAAeX,OAAf","sourcesContent":["import { SET_SEARCH_RESULT, ISearchResultState } from \"./types\";\nimport { ISearchRepository } from \"interfaces\";\nimport { gitApi } from \"utils/api\";\n\nconst parseRepos = (repos) => {\n  return repos.map((item) => {\n    const {\n      full_name,\n      owner,\n      html_url,\n      description,\n      stargazers_count,\n      language,\n      license,\n      updated_at,\n    } = item;\n\n    return {\n      full_name,\n      owner: owner.login,\n      html_url,\n      description,\n      stargazers_count,\n      language,\n      license: license.name,\n      updated_at,\n    };\n  });\n};\n\nconst Actions = {\n  setSearchResult: (searchResult: ISearchResultState) => {\n    return {\n      type: SET_SEARCH_RESULT,\n      payload: searchResult,\n    };\n  },\n  fetchSearch: (searchQuery: ISearchRepository) => async (dispatch) => {\n    const repos = await gitApi.searchRepository(searchQuery);\n    console.log(parseRepos(repos.items));\n  },\n};\n\nexport default Actions;\n"]},"metadata":{},"sourceType":"module"}