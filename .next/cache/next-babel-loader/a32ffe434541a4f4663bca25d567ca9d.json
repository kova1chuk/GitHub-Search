{"ast":null,"code":"import { SET_SEARCH_RESULT } from \"./types\";\nimport { gitApi } from \"utils/api\";\n\nconst parseRepos = repos => {// return\n  // const { total_count, incomplete_results, items } = response.data;\n  // console.log(\n  //   items.map((item) => {\n  //     const {\n  //       full_name,\n  //       html_url,\n  //       description,\n  //       stargazers_count,\n  //       language,\n  //       license,\n  //       updated_at,\n  //     } = item;\n  //     return {\n  //       full_name,\n  //       html_url,\n  //       description,\n  //       stargazers_count,\n  //       language,\n  //       license: license.name,\n  //       updated_at,\n  //     };\n  //   })\n  // );\n};\n\nconst Actions = {\n  setSearchResult: searchResult => {\n    return {\n      type: SET_SEARCH_RESULT,\n      payload: searchResult\n    };\n  },\n  fetchSearch: searchQuery => async dispatch => {\n    const repos = await gitApi.searchRepository(searchQuery);\n  }\n};\nexport default Actions;","map":{"version":3,"sources":["/home/oleksii/Documents/Programming/BetterMeTest/store/repoSearch/actions.ts"],"names":["SET_SEARCH_RESULT","gitApi","parseRepos","repos","Actions","setSearchResult","searchResult","type","payload","fetchSearch","searchQuery","dispatch","searchRepository"],"mappings":"AAAA,SAASA,iBAAT,QAAsD,SAAtD;AAEA,SAASC,MAAT,QAAuB,WAAvB;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAW,CAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CAzBD;;AA2BA,MAAMC,OAAO,GAAG;AACdC,EAAAA,eAAe,EAAGC,YAAD,IAAsC;AACrD,WAAO;AACLC,MAAAA,IAAI,EAAEP,iBADD;AAELQ,MAAAA,OAAO,EAAEF;AAFJ,KAAP;AAID,GANa;AAOdG,EAAAA,WAAW,EAAGC,WAAD,IAAoC,MAAOC,QAAP,IAAoB;AACnE,UAAMR,KAAK,GAAG,MAAMF,MAAM,CAACW,gBAAP,CAAwBF,WAAxB,CAApB;AACD;AATa,CAAhB;AAYA,eAAeN,OAAf","sourcesContent":["import { SET_SEARCH_RESULT, ISearchResultState } from \"./types\";\nimport { ISearchRepository } from \"interfaces\";\nimport { gitApi } from \"utils/api\";\n\nconst parseRepos = (repos) => {\n  // return\n  // const { total_count, incomplete_results, items } = response.data;\n  // console.log(\n  //   items.map((item) => {\n  //     const {\n  //       full_name,\n  //       html_url,\n  //       description,\n  //       stargazers_count,\n  //       language,\n  //       license,\n  //       updated_at,\n  //     } = item;\n  //     return {\n  //       full_name,\n  //       html_url,\n  //       description,\n  //       stargazers_count,\n  //       language,\n  //       license: license.name,\n  //       updated_at,\n  //     };\n  //   })\n  // );\n};\n\nconst Actions = {\n  setSearchResult: (searchResult: ISearchResultState) => {\n    return {\n      type: SET_SEARCH_RESULT,\n      payload: searchResult,\n    };\n  },\n  fetchSearch: (searchQuery: ISearchRepository) => async (dispatch) => {\n    const repos = await gitApi.searchRepository(searchQuery);\n  },\n};\n\nexport default Actions;\n"]},"metadata":{},"sourceType":"module"}