{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { SET_SEARCH_RESULT } from \"./types\";\nimport { gitApi } from \"utils/api\";\nvar Actions = {\n  setSearchResult: function setSearchResult(searchResult) {\n    return {\n      type: SET_SEARCH_RESULT,\n      payload: searchResult\n    };\n  },\n  fetchSearch: function fetchSearch(searchQuery) {\n    return function _callee(dispatch) {\n      var repos, items, total_count;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(gitApi.searchRepository(searchQuery));\n\n            case 3:\n              repos = _context.sent;\n              items = repos.items, total_count = repos.total_count;\n              items = parseRepos(items);\n              _context.next = 8;\n              return _regeneratorRuntime.awrap(addTopics(items));\n\n            case 8:\n              items = _context.sent;\n              _context.next = 11;\n              return _regeneratorRuntime.awrap(addIssuesNeedHelp(items));\n\n            case 11:\n              items = _context.sent;\n              dispatch(Actions.setSearchResult({\n                total_count: total_count,\n                repos: items\n              }));\n              _context.next = 18;\n              break;\n\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 15]], Promise);\n    };\n  }\n};\nexport default Actions;\n\nvar parseRepos = function parseRepos(repos) {\n  return repos.map(function (item) {\n    var name = item.name,\n        full_name = item.full_name,\n        owner = item.owner,\n        html_url = item.html_url,\n        description = item.description,\n        stargazers_count = item.stargazers_count,\n        language = item.language,\n        license = item.license,\n        updated_at = item.updated_at;\n    return {\n      name: name,\n      full_name: full_name,\n      owner: owner.login,\n      html_url: html_url,\n      description: description,\n      stargazers_count: stargazers_count,\n      language: language,\n      license: license ? license.name : null,\n      updated_at: updated_at\n    };\n  });\n};\n\nvar addTopics = function addTopics(repos) {\n  return Promise.all(repos.map(function _callee2(item) {\n    var topics;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(gitApi.getRepositoryTopics(item.owner, item.name));\n\n          case 3:\n            topics = _context2.sent;\n            return _context2.abrupt(\"return\", _objectSpread({\n              topics: topics ? topics.names : null\n            }, item));\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](0);\n            return _context2.abrupt(\"return\", item);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  }));\n};\n\nvar addIssuesNeedHelp = function addIssuesNeedHelp(repos) {\n  return Promise.all(repos.map(function _callee3(item) {\n    var issues;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(gitApi.getRepositoryIssuesNeedHelp(item.owner, item.name));\n\n          case 3:\n            issues = _context3.sent;\n            return _context3.abrupt(\"return\", _objectSpread({\n              issues_need_help: issues.length\n            }, item));\n\n          case 7:\n            _context3.prev = 7;\n            _context3.t0 = _context3[\"catch\"](0);\n            return _context3.abrupt(\"return\", item);\n\n          case 10:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  }));\n};","map":{"version":3,"sources":["/home/oleksii/Documents/bettermetest/store/repoSearch/actions.ts"],"names":["SET_SEARCH_RESULT","gitApi","Actions","setSearchResult","searchResult","type","payload","fetchSearch","searchQuery","dispatch","searchRepository","repos","items","total_count","parseRepos","addTopics","addIssuesNeedHelp","console","log","map","item","name","full_name","owner","html_url","description","stargazers_count","language","license","updated_at","login","Promise","all","getRepositoryTopics","topics","names","getRepositoryIssuesNeedHelp","issues","issues_need_help","length"],"mappings":"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","sourcesContent":["import { SET_SEARCH_RESULT, ISearchResultState } from \"./types\";\nimport { ISearchRepository } from \"interfaces\";\nimport { gitApi } from \"utils/api\";\n\nconst Actions = {\n  setSearchResult: (searchResult: ISearchResultState) => {\n    return {\n      type: SET_SEARCH_RESULT,\n      payload: searchResult,\n    };\n  },\n  fetchSearch: (searchQuery: ISearchRepository) => async (dispatch) => {\n    try {\n      const repos = await gitApi.searchRepository(searchQuery);\n      let { items, total_count } = repos;\n\n      items = parseRepos(items);\n      items = await addTopics(items);\n      items = await addIssuesNeedHelp(items);\n\n      dispatch(Actions.setSearchResult({ total_count, repos: items }));\n    } catch (err) {\n      console.log(err);\n    }\n  },\n};\n\nexport default Actions;\n\nconst parseRepos = (repos) => {\n  return repos.map((item) => {\n    const {\n      name,\n      full_name,\n      owner,\n      html_url,\n      description,\n      stargazers_count,\n      language,\n      license,\n      updated_at,\n    } = item;\n\n    return {\n      name,\n      full_name,\n      owner: owner.login,\n      html_url,\n      description,\n      stargazers_count,\n      language,\n      license: license ? license.name : null,\n      updated_at,\n    };\n  });\n};\n\nconst addTopics = (repos) => {\n  return Promise.all(\n    repos.map(async (item) => {\n      try {\n        const topics = await gitApi.getRepositoryTopics(item.owner, item.name);\n        return {\n          topics: topics ? topics.names : null,\n          ...item,\n        };\n      } catch (error) {\n        return item;\n      }\n    })\n  );\n};\n\nconst addIssuesNeedHelp = (repos) => {\n  return Promise.all(\n    repos.map(async (item) => {\n      try {\n        const issues = await gitApi.getRepositoryIssuesNeedHelp(\n          item.owner,\n          item.name\n        );\n        return {\n          issues_need_help: issues.length,\n          ...item,\n        };\n      } catch {\n        return item;\n      }\n    })\n  );\n};\n"]},"metadata":{},"sourceType":"module"}