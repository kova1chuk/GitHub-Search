{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { SET_SEARCH_RESULT } from \"./types\";\nimport { gitApi } from \"utils/api\";\nvar Actions = {\n  setSearchResult: function setSearchResult(searchResult) {\n    return {\n      type: SET_SEARCH_RESULT,\n      payload: searchResult\n    };\n  },\n  fetchSearch: function fetchSearch(searchQuery) {\n    return function _callee(dispatch) {\n      var res;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(gitApi.searchRepository(searchQuery));\n\n            case 2:\n              res = _context.sent;\n              console.log(res);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n  }\n};\nexport default Actions;","map":{"version":3,"sources":["/home/oleksii/Documents/Programming/BetterMeTest/store/repoSearch/actions.ts"],"names":["SET_SEARCH_RESULT","gitApi","Actions","setSearchResult","searchResult","type","payload","fetchSearch","searchQuery","dispatch","searchRepository","res","console","log"],"mappings":";AAAA,SAASA,iBAAT,QAAkC,SAAlC;AAEA,SAASC,MAAT,QAAuB,WAAvB;AAEA,IAAMC,OAAO,GAAG;AACdC,EAAAA,eAAe,EAAE,yBAACC,YAAD,EAAqC;AACpD,WAAO;AACLC,MAAAA,IAAI,EAAEL,iBADD;AAELM,MAAAA,OAAO,EAAEF;AAFJ,KAAP;AAID,GANa;AAOdG,EAAAA,WAAW,EAAE,qBAACC,WAAD;AAAA,WAAoC,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAC7BR,MAAM,CAACS,gBAAP,CAAwBF,WAAxB,CAD6B;;AAAA;AACzCG,cAAAA,GADyC;AAE/CC,cAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;;AAF+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAApC;AAAA;AAPC,CAAhB;AAaA,eAAeT,OAAf","sourcesContent":["import { SET_SEARCH_RESULT } from \"./types\";\nimport { IRepositoryItem, ISearchRepository } from \"interfaces\";\nimport { gitApi } from \"utils/api\";\n\nconst Actions = {\n  setSearchResult: (searchResult: IRepositoryItem[]) => {\n    return {\n      type: SET_SEARCH_RESULT,\n      payload: searchResult,\n    };\n  },\n  fetchSearch: (searchQuery: ISearchRepository) => async (dispatch) => {\n    const res = await gitApi.searchRepository(searchQuery);\n    console.log(res);\n  },\n};\n\nexport default Actions;\n"]},"metadata":{},"sourceType":"module"}