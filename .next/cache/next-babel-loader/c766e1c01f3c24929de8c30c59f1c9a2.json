{"ast":null,"code":"var GIT_SEARCH_CACHE = \"gitSearchCache\";\nexport default {\n  writeTo: function writeTo(searchRequest) {\n    if (localStorage) {\n      var store = new Set(JSON.parse(localStorage[GIT_SEARCH_CACHE]));\n      store.add(searchRequest);\n      localStorage[GIT_SEARCH_CACHE] = JSON.stringify(Array.from(store));\n    }\n  },\n  searchIn: function searchIn(searchRequest) {\n    if (localStorage) {\n      console.log(localStorage[GIT_SEARCH_CACHE]);\n      var store = new Set(JSON.parse(localStorage[GIT_SEARCH_CACHE]));\n      var result = Array.from(store).filter(function (item) {\n        return item.search(searchRequest) !== -1;\n      });\n      return result;\n    }\n  }\n};","map":{"version":3,"sources":["/home/oleksii/Documents/Programming/BetterMeTest/utils/searchCache.ts"],"names":["GIT_SEARCH_CACHE","writeTo","searchRequest","localStorage","store","Set","JSON","parse","add","stringify","Array","from","searchIn","console","log","result","filter","item","search"],"mappings":"AAAA,IAAMA,gBAAgB,GAAG,gBAAzB;AAEA,eAAe;AACbC,EAAAA,OAAO,EAAE,iBAACC,aAAD,EAA2B;AAClC,QAAIC,YAAJ,EAAkB;AAChB,UAAMC,KAAK,GAAG,IAAIC,GAAJ,CAAgBC,IAAI,CAACC,KAAL,CAAWJ,YAAY,CAACH,gBAAD,CAAvB,CAAhB,CAAd;AACAI,MAAAA,KAAK,CAACI,GAAN,CAAUN,aAAV;AACAC,MAAAA,YAAY,CAACH,gBAAD,CAAZ,GAAiCM,IAAI,CAACG,SAAL,CAAeC,KAAK,CAACC,IAAN,CAAWP,KAAX,CAAf,CAAjC;AACD;AACF,GAPY;AAQbQ,EAAAA,QAAQ,EAAE,kBAACV,aAAD,EAA2B;AACnC,QAAIC,YAAJ,EAAkB;AAChBU,MAAAA,OAAO,CAACC,GAAR,CAAYX,YAAY,CAACH,gBAAD,CAAxB;AACA,UAAMI,KAAK,GAAG,IAAIC,GAAJ,CAAgBC,IAAI,CAACC,KAAL,CAAWJ,YAAY,CAACH,gBAAD,CAAvB,CAAhB,CAAd;AACA,UAAMe,MAAM,GAAGL,KAAK,CAACC,IAAN,CAAWP,KAAX,EAAkBY,MAAlB,CACb,UAACC,IAAD;AAAA,eAAUA,IAAI,CAACC,MAAL,CAAYhB,aAAZ,MAA+B,CAAC,CAA1C;AAAA,OADa,CAAf;AAGA,aAAOa,MAAP;AACD;AACF;AAjBY,CAAf","sourcesContent":["const GIT_SEARCH_CACHE = \"gitSearchCache\";\n\nexport default {\n  writeTo: (searchRequest: string) => {\n    if (localStorage) {\n      const store = new Set<string>(JSON.parse(localStorage[GIT_SEARCH_CACHE]));\n      store.add(searchRequest);\n      localStorage[GIT_SEARCH_CACHE] = JSON.stringify(Array.from(store));\n    }\n  },\n  searchIn: (searchRequest: string) => {\n    if (localStorage) {\n      console.log(localStorage[GIT_SEARCH_CACHE]);\n      const store = new Set<string>(JSON.parse(localStorage[GIT_SEARCH_CACHE]));\n      const result = Array.from(store).filter(\n        (item) => item.search(searchRequest) !== -1\n      );\n      return result;\n    }\n  },\n};\n"]},"metadata":{},"sourceType":"module"}