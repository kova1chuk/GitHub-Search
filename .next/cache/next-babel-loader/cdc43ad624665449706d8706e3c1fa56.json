{"ast":null,"code":"var _jsxFileName = \"/home/oleksii/Documents/Programming/BetterMeTest/pages/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n// import { gitApi } from \"utils/api\";\nimport { connect } from \"react-redux\";\nimport searchReposActions from \"store/repoSearch/actions\";\nimport { Header } from \"components\";\nimport { SearchResult } from \"containers\";\n\nfunction HomePage({\n  total_count,\n  repos,\n  fetchSearch\n}) {\n  // fetchSearch({\n  //   q: \"js\",\n  //   sort: \"stars\",\n  //   order: \"desc\",\n  //   per_page: 30,\n  //   page: 1,\n  // });\n  // Promise.all([\n  //   gitApi.searchRepository({\n  //     q: \"js\",\n  //     // ,sort:\"stars\",order=\"desc\"\n  //     per_page: 1,\n  //     page: 1,\n  //   }),\n  //   gitApi.getRepositoryTopics(\"vuejs\", \"vue\"),\n  //   gitApi.getRepositoryIssuesNeedHelp(\"vuejs\", \"vue\"),\n  // ]).then((response) => {\n  //   console.log(response);\n  // });\n  const onSearch = request => {\n    fetchSearch({\n      q: request,\n      sort: \"stars\",\n      order: \"desc\",\n      per_page: 30,\n      page: 1\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Header, {\n    onSearch: onSearch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }), repos && __jsx(SearchResult, {\n    repos: repos,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }\n  }));\n}\n\nconst mapStateToProps = ({\n  repoSearchReducer\n}) => ({\n  total_count: repoSearchReducer.total_count,\n  repos: repoSearchReducer.repos\n});\n\nconst mapDispatchToProps = {\n  fetchSearch: searchReposActions.fetchSearch\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);","map":{"version":3,"sources":["/home/oleksii/Documents/Programming/BetterMeTest/pages/index.tsx"],"names":["connect","searchReposActions","Header","SearchResult","HomePage","total_count","repos","fetchSearch","onSearch","request","q","sort","order","per_page","page","mapStateToProps","repoSearchReducer","mapDispatchToProps"],"mappings":";;;AAAA;AAEA,SAASA,OAAT,QAAwB,aAAxB;AAEA,OAAOC,kBAAP,MAA+B,0BAA/B;AACA,SAASC,MAAT,QAAuB,YAAvB;AACA,SAASC,YAAT,QAA6B,YAA7B;;AAEA,SAASC,QAAT,CAAkB;AAAEC,EAAAA,WAAF;AAAeC,EAAAA,KAAf;AAAsBC,EAAAA;AAAtB,CAAlB,EAAuD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,QAAMC,QAAQ,GAAIC,OAAD,IAAqB;AACpCF,IAAAA,WAAW,CAAC;AACVG,MAAAA,CAAC,EAAED,OADO;AAEVE,MAAAA,IAAI,EAAE,OAFI;AAGVC,MAAAA,KAAK,EAAE,MAHG;AAIVC,MAAAA,QAAQ,EAAE,EAJA;AAKVC,MAAAA,IAAI,EAAE;AALI,KAAD,CAAX;AAOD,GARD;;AASA,SACE,4BACE,MAAC,MAAD;AAAQ,IAAA,QAAQ,EAAEN,QAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEGF,KAAK,IAAI,MAAC,YAAD;AAAc,IAAA,KAAK,EAAEA,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFZ,CADF;AAMD;;AAED,MAAMS,eAAe,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,MAA4B;AAClDX,EAAAA,WAAW,EAAEW,iBAAiB,CAACX,WADmB;AAElDC,EAAAA,KAAK,EAAEU,iBAAiB,CAACV;AAFyB,CAA5B,CAAxB;;AAIA,MAAMW,kBAAkB,GAAG;AAAEV,EAAAA,WAAW,EAAEN,kBAAkB,CAACM;AAAlC,CAA3B;AAEA,eAAeP,OAAO,CAACe,eAAD,EAAkBE,kBAAlB,CAAP,CAA6Cb,QAA7C,CAAf","sourcesContent":["// import { gitApi } from \"utils/api\";\n\nimport { connect } from \"react-redux\";\n\nimport searchReposActions from \"store/repoSearch/actions\";\nimport { Header } from \"components\";\nimport { SearchResult } from \"containers\";\n\nfunction HomePage({ total_count, repos, fetchSearch }) {\n  // fetchSearch({\n  //   q: \"js\",\n  //   sort: \"stars\",\n  //   order: \"desc\",\n  //   per_page: 30,\n  //   page: 1,\n  // });\n  // Promise.all([\n  //   gitApi.searchRepository({\n  //     q: \"js\",\n  //     // ,sort:\"stars\",order=\"desc\"\n  //     per_page: 1,\n  //     page: 1,\n  //   }),\n  //   gitApi.getRepositoryTopics(\"vuejs\", \"vue\"),\n  //   gitApi.getRepositoryIssuesNeedHelp(\"vuejs\", \"vue\"),\n  // ]).then((response) => {\n  //   console.log(response);\n  // });\n\n  const onSearch = (request: string) => {\n    fetchSearch({\n      q: request,\n      sort: \"stars\",\n      order: \"desc\",\n      per_page: 30,\n      page: 1,\n    });\n  };\n  return (\n    <>\n      <Header onSearch={onSearch} />\n      {repos && <SearchResult repos={repos} />}\n    </>\n  );\n}\n\nconst mapStateToProps = ({ repoSearchReducer }) => ({\n  total_count: repoSearchReducer.total_count,\n  repos: repoSearchReducer.repos,\n});\nconst mapDispatchToProps = { fetchSearch: searchReposActions.fetchSearch };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);\n"]},"metadata":{},"sourceType":"module"}