{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { getRequestParser } from \"utils\";\nimport { axiosGitApi as axios } from \"core\";\nexport default {\n  searchRepository: function searchRepository() {\n    var searchRequest,\n        _args = arguments;\n    return _regeneratorRuntime.async(function searchRepository$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            searchRequest = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(axios.get(\"/search/repositories\".concat(getRequestParser(searchRequest))).then(function (response) {\n              console.log(\"response.status\", response.status);\n\n              if (response.status !== 200) {\n                return Promise.reject();\n              }\n\n              return Promise.resolve(response.data); // const { total_count, incomplete_results, items } = response.data;\n              // console.log(\n              //   items.map((item) => {\n              //     const {\n              //       full_name,\n              //       html_url,\n              //       description,\n              //       stargazers_count,\n              //       language,\n              //       license,\n              //       updated_at,\n              //     } = item;\n              //     return {\n              //       full_name,\n              //       html_url,\n              //       description,\n              //       stargazers_count,\n              //       language,\n              //       license: license.name,\n              //       updated_at,\n              //     };\n              //   })\n              // );\n            }));\n\n          case 3:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n}; // name\n// discription\n// topics\n// stars\n// labguage\n// license\n// updated\n// issues needs help","map":{"version":3,"sources":["/home/oleksii/Documents/Programming/BetterMeTest/utils/api/git.ts"],"names":["getRequestParser","axiosGitApi","axios","searchRepository","searchRequest","get","then","response","console","log","status","Promise","reject","resolve","data"],"mappings":";AAAA,SAASA,gBAAT,QAAiC,OAAjC;AACA,SAASC,WAAW,IAAIC,KAAxB,QAAqC,MAArC;AAGA,eAAe;AACbC,EAAAA,gBAAgB,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBC,YAAAA,aADgB,2DACmB,EADnB;AAAA;AAAA,6CAGHF,KAAK,CACfG,GADU,+BACiBL,gBAAgB,CAACI,aAAD,CADjC,GAEVE,IAFU,CAEL,UAACC,QAAD,EAAc;AAClBC,cAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BF,QAAQ,CAACG,MAAxC;;AACA,kBAAIH,QAAQ,CAACG,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,uBAAOC,OAAO,CAACC,MAAR,EAAP;AACD;;AACD,qBAAOD,OAAO,CAACE,OAAR,CAAgBN,QAAQ,CAACO,IAAzB,CAAP,CALkB,CAMlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,aA/BU,CAHG;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADL,CAAf,C,CAuCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { getRequestParser } from \"utils\";\nimport { axiosGitApi as axios } from \"core\";\nimport { ISearchRepository } from \"interfaces\";\n\nexport default {\n  searchRepository: async (\n    searchRequest: ISearchRepository = {}\n  ): Promise<any> => {\n    return await axios\n      .get(`/search/repositories${getRequestParser(searchRequest)}`)\n      .then((response) => {\n        console.log(\"response.status\", response.status);\n        if (response.status !== 200) {\n          return Promise.reject();\n        }\n        return Promise.resolve(response.data);\n        // const { total_count, incomplete_results, items } = response.data;\n        // console.log(\n        //   items.map((item) => {\n        //     const {\n        //       full_name,\n        //       html_url,\n        //       description,\n        //       stargazers_count,\n        //       language,\n        //       license,\n        //       updated_at,\n        //     } = item;\n        //     return {\n        //       full_name,\n        //       html_url,\n        //       description,\n        //       stargazers_count,\n        //       language,\n        //       license: license.name,\n        //       updated_at,\n        //     };\n        //   })\n        // );\n      });\n  },\n};\n\n// name\n// discription\n// topics\n// stars\n// labguage\n// license\n// updated\n// issues needs help\n"]},"metadata":{},"sourceType":"module"}