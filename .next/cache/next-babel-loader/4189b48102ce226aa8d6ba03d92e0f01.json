{"ast":null,"code":"import { SET_SEARCH_RESULT } from \"./types\";\nimport { gitApi } from \"utils/api\";\nconst Actions = {\n  setSearchResult: searchResult => {\n    return {\n      type: SET_SEARCH_RESULT,\n      payload: searchResult\n    };\n  },\n  fetchSearch: searchQuery => async dispatch => {\n    const repos = await gitApi.searchRepository(searchQuery);\n    console.log(parseRepos(repos.items)); // const\n  }\n};\nexport default Actions;\n\nconst parseRepos = repos => {\n  return repos.map(item => {\n    const {\n      name,\n      full_name,\n      owner,\n      html_url,\n      description,\n      stargazers_count,\n      language,\n      license,\n      updated_at\n    } = item;\n    return {\n      name,\n      full_name,\n      owner: owner.login,\n      html_url,\n      description,\n      stargazers_count,\n      language,\n      license: license.name,\n      updated_at\n    };\n  });\n};\n\nconst addTopics = repos => {\n  return Promise.all(repos.map(async item => {\n    const topics = await gitApi.getRepositoryTopics(item.owner, item.name);\n    return {\n      name,\n      full_name,\n      owner: owner.login,\n      html_url,\n      description,\n      stargazers_count,\n      language,\n      license: license.name,\n      updated_at\n    };\n  }));\n};","map":{"version":3,"sources":["/home/oleksii/Documents/Programming/BetterMeTest/store/repoSearch/actions.ts"],"names":["SET_SEARCH_RESULT","gitApi","Actions","setSearchResult","searchResult","type","payload","fetchSearch","searchQuery","dispatch","repos","searchRepository","console","log","parseRepos","items","map","item","name","full_name","owner","html_url","description","stargazers_count","language","license","updated_at","login","addTopics","Promise","all","topics","getRepositoryTopics"],"mappings":"AAAA,SAASA,iBAAT,QAAsD,SAAtD;AAEA,SAASC,MAAT,QAAuB,WAAvB;AAEA,MAAMC,OAAO,GAAG;AACdC,EAAAA,eAAe,EAAGC,YAAD,IAAsC;AACrD,WAAO;AACLC,MAAAA,IAAI,EAAEL,iBADD;AAELM,MAAAA,OAAO,EAAEF;AAFJ,KAAP;AAID,GANa;AAOdG,EAAAA,WAAW,EAAGC,WAAD,IAAoC,MAAOC,QAAP,IAAoB;AACnE,UAAMC,KAAK,GAAG,MAAMT,MAAM,CAACU,gBAAP,CAAwBH,WAAxB,CAApB;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYC,UAAU,CAACJ,KAAK,CAACK,KAAP,CAAtB,EAFmE,CAInE;AACD;AAZa,CAAhB;AAeA,eAAeb,OAAf;;AAEA,MAAMY,UAAU,GAAIJ,KAAD,IAAW;AAC5B,SAAOA,KAAK,CAACM,GAAN,CAAWC,IAAD,IAAU;AACzB,UAAM;AACJC,MAAAA,IADI;AAEJC,MAAAA,SAFI;AAGJC,MAAAA,KAHI;AAIJC,MAAAA,QAJI;AAKJC,MAAAA,WALI;AAMJC,MAAAA,gBANI;AAOJC,MAAAA,QAPI;AAQJC,MAAAA,OARI;AASJC,MAAAA;AATI,QAUFT,IAVJ;AAYA,WAAO;AACLC,MAAAA,IADK;AAELC,MAAAA,SAFK;AAGLC,MAAAA,KAAK,EAAEA,KAAK,CAACO,KAHR;AAILN,MAAAA,QAJK;AAKLC,MAAAA,WALK;AAMLC,MAAAA,gBANK;AAOLC,MAAAA,QAPK;AAQLC,MAAAA,OAAO,EAAEA,OAAO,CAACP,IARZ;AASLQ,MAAAA;AATK,KAAP;AAWD,GAxBM,CAAP;AAyBD,CA1BD;;AA4BA,MAAME,SAAS,GAAIlB,KAAD,IAAW;AAC3B,SAAOmB,OAAO,CAACC,GAAR,CACLpB,KAAK,CAACM,GAAN,CAAU,MAAOC,IAAP,IAAgB;AACxB,UAAMc,MAAM,GAAG,MAAM9B,MAAM,CAAC+B,mBAAP,CAA2Bf,IAAI,CAACG,KAAhC,EAAuCH,IAAI,CAACC,IAA5C,CAArB;AAEA,WAAO;AACLA,MAAAA,IADK;AAELC,MAAAA,SAFK;AAGLC,MAAAA,KAAK,EAAEA,KAAK,CAACO,KAHR;AAILN,MAAAA,QAJK;AAKLC,MAAAA,WALK;AAMLC,MAAAA,gBANK;AAOLC,MAAAA,QAPK;AAQLC,MAAAA,OAAO,EAAEA,OAAO,CAACP,IARZ;AASLQ,MAAAA;AATK,KAAP;AAWD,GAdD,CADK,CAAP;AAiBD,CAlBD","sourcesContent":["import { SET_SEARCH_RESULT, ISearchResultState } from \"./types\";\nimport { ISearchRepository } from \"interfaces\";\nimport { gitApi } from \"utils/api\";\n\nconst Actions = {\n  setSearchResult: (searchResult: ISearchResultState) => {\n    return {\n      type: SET_SEARCH_RESULT,\n      payload: searchResult,\n    };\n  },\n  fetchSearch: (searchQuery: ISearchRepository) => async (dispatch) => {\n    const repos = await gitApi.searchRepository(searchQuery);\n    console.log(parseRepos(repos.items));\n\n    // const\n  },\n};\n\nexport default Actions;\n\nconst parseRepos = (repos) => {\n  return repos.map((item) => {\n    const {\n      name,\n      full_name,\n      owner,\n      html_url,\n      description,\n      stargazers_count,\n      language,\n      license,\n      updated_at,\n    } = item;\n\n    return {\n      name,\n      full_name,\n      owner: owner.login,\n      html_url,\n      description,\n      stargazers_count,\n      language,\n      license: license.name,\n      updated_at,\n    };\n  });\n};\n\nconst addTopics = (repos) => {\n  return Promise.all(\n    repos.map(async (item) => {\n      const topics = await gitApi.getRepositoryTopics(item.owner, item.name);\n\n      return {\n        name,\n        full_name,\n        owner: owner.login,\n        html_url,\n        description,\n        stargazers_count,\n        language,\n        license: license.name,\n        updated_at,\n      };\n    })\n  );\n};\n"]},"metadata":{},"sourceType":"module"}