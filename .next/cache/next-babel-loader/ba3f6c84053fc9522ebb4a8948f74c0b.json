{"ast":null,"code":"const kFormatter = num => {\n  return Math.abs(num) > 999 ? String(Math.sign(num) * Number((Math.abs(num) / 1000).toFixed(1))) + \"k\" : String(Math.sign(num) * Math.abs(num));\n};\n\nexport default kFormatter;","map":{"version":3,"sources":["/home/oleksii/Documents/Programming/BetterMeTest/utils/kFormatter.ts"],"names":["kFormatter","num","Math","abs","String","sign","Number","toFixed"],"mappings":"AAAA,MAAMA,UAAU,GAAIC,GAAD,IAAyB;AAC1C,SAAOC,IAAI,CAACC,GAAL,CAASF,GAAT,IAAgB,GAAhB,GACHG,MAAM,CAACF,IAAI,CAACG,IAAL,CAAUJ,GAAV,IAAiBK,MAAM,CAAC,CAACJ,IAAI,CAACC,GAAL,CAASF,GAAT,IAAgB,IAAjB,EAAuBM,OAAvB,CAA+B,CAA/B,CAAD,CAAxB,CAAN,GAAqE,GADlE,GAEHH,MAAM,CAACF,IAAI,CAACG,IAAL,CAAUJ,GAAV,IAAiBC,IAAI,CAACC,GAAL,CAASF,GAAT,CAAlB,CAFV;AAGD,CAJD;;AAKA,eAAeD,UAAf","sourcesContent":["const kFormatter = (num: number): string => {\n  return Math.abs(num) > 999\n    ? String(Math.sign(num) * Number((Math.abs(num) / 1000).toFixed(1))) + \"k\"\n    : String(Math.sign(num) * Math.abs(num));\n};\nexport default kFormatter;\n"]},"metadata":{},"sourceType":"module"}